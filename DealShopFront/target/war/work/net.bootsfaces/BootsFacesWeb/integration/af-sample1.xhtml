<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:fragment xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://bootsfaces.net/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets">

	<h:body>
		<b:tabView  activeIndex="0">
			<b:tab title="live demo">
				<b:well>
<div ng-controller="IntegrationController" ng-app="IntegrationApp" angularJSFile="/pages/integration/test.js">
	<h:form id="sample1id" name="sample1" prependId="false" styleClass="form-horizontal">
		<panelGrid colSpans="4,2,6" size="xs"> 
			<selectOneMenu value="{{carBean.brand}}" id="brandID">
				<option value="">            (Please select)</option>
				<option value="Turin">       Fiat           </option>
				<option value="Swindon">     Honda          </option>
				<option value="Ruesselsheim">Opel           </option>
			</selectOneMenu> 
			<selectOneMenu value="{{carBean.type}}" id="typeID" label="Select your car">
				<option value="">(Please select)</option>
				<option>         Cinquecento    </option>
				<option>         Civic          </option>
				<option>         Astra          </option>
				<option>         Megane         </option>
			</selectOneMenu> 
			<inputText value="{{carBean.price}}" label="How much do you want to pay at most?" id="price"> 
				<f:facet name="prepend">
				    <h:outputText value="€" />
				</f:facet> 
				<f:facet name="append">
				    <h:outputText value=".00" />
				</f:facet>
			</inputText> 
			<inputText value="{{carBean.enginePower}}">
				<f:facet name="append">
				    <h:outputText value="HP" />
				</f:facet>
			</inputText> 
			<selectBooleanCheckbox value="{{carBean.iAgreeToTheTermsAndConditions}}" /> 
		</panelGrid>
		<commandButton value="Look which cars are available" ng-show="carBean.iAgreeToTheTermsAndConditions" />
	</h:form>
</div>
				</b:well>
			</b:tab>
				<b:tab title="JSF markup">
					<b:well>

						<script type="syntaxhighlighter"
							class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
<div ng-controller="IntegrationController" ng-app="IntegrationApp" angularJSFile="/pages/integration/test.js">
	<h:form id="sample1id" name="sample1" prependId="false">
		<panelGrid colSpans="4,2,6" size="xs"> 
			<selectOneMenu value="{{carBean.brand}}" id="brandID">
				<option value="">            (Please select)</option>
				<option value="Turin">       Fiat           </option>
				<option value="Swindon">     Honda          </option>
				<option value="Ruesselsheim">Opel           </option>
			</selectOneMenu> 
			<selectOneMenu value="{{carBean.type}}" id="typeID" label="Select your car">
				<option value="">(Please select)</option>
				<option>         Cinquecento    </option>
				<option>         Civic          </option>
				<option>         Astra          </option>
				<option>         Megane         </option>
			</selectOneMenu> 
			<inputText value="{{carBean.price}}" label="How much do you want to pay at most?" id="price"> 
				<f:facet name="prepend">
				    <h:outputText value="€" />
				</f:facet> 
				<f:facet name="append">
				    <h:outputText value=".00" />
				</f:facet>
			</inputText> 
			<inputText value="{{carBean.enginePower}}">
				<f:facet name="append">
				    <h:outputText value="HP" />
				</f:facet>
			</inputText> 
			<selectBooleanCheckbox value="{{carBean.iAgreeToTheTermsAndConditions}}" /> 
		</panelGrid>
		<commandButton value="Look which cars are available" ng-show="carBean.iAgreeToTheTermsAndConditions" />
	</h:form>
</div>
]]>
       </script>
					</b:well>
				</b:tab>
				<b:tab title="AngularJS Controller">
				<b:well>
						<script type="syntaxhighlighter"
							class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
angular.module("IntegrationApp", [ "angularfaces" ])
.controller('IntegrationController', ['$scope', function($scope) {
    initJSFScope($scope);
}]);


]]>
       </script>
      </b:well>
			</b:tab>
			<b:tab title="i18n.properties (optional)">
				<b:well>
				<p>i18n files can be useful even if you don't want to support foreign languages. If you don't define a label manually, AngularFaces guesses a label for you. You can replace this label by a 
				   more adequate label using the property file. This way, you can write very concise JSF code, which is nice for rapid prototyping. In case the texts aren't up to your customer's liking,
				   you can fix them later in a properties file.</p>
				<p>Put the <code>i18n.properties</code> into the root folder of your class path.</p>
						<script type="syntaxhighlighter"
							class="brush: js; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
brand=Select your car brand:
engine power=How much engine power do you need?
]]>
</script>
					
				</b:well>
			</b:tab>
			<b:tab title="i18n_de.properties (optional)">
				<b:well>
				<p>AngularFaces supports foreign languages out of the box. Simply put an <code>i18n_{language}.properties</code> file into the root folder of your class path ({language} being a placeholder for the two-letter code of the target language).
				For example, if you set the browser to "German", it shows the live demo in German language - including labels and error messages. The error messages are translated in an error messages file provided with AngularFaces. The other messages are
				translated in the <code>i18n_de.properties</code> file:</p>
						<script type="syntaxhighlighter"
							class="brush: js; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
brand=Bitte wählen Sie die Marke:
engine power=Wie viele PS brauchen Sie?
Select your car=Welches Modell suchen Sie?
How much do you want to pay at most?=Höchstpreis:
i agree to the terms and conditions=Ich habe die AGBs gelesen und akzeptiert.
Look which cars are available=Suche nach passenden Fahrzeugen
HP=PS
]]>
</script>
					
				</b:well>
			</b:tab>
			<b:tab title="JSF bean">
				<b:well>
					<script type="syntaxhighlighter" class="brush: java; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
@RequestScoped
@ManagedBean
public class CarBean {
	@NotNull
	private String brand;

	@NotNull
	private String type;

	@NotNull
	@Min(500)
	@Max(50000)
	private int price;

	@NotNull
	@Min(2)
	@Max(999)
	private int enginePower;
	
	private boolean iAgreeToTheTermsAndConditions=false;
	
	// getters and setters are omitted for the sake of brevity
}
]]>
					</script>
				</b:well>
			</b:tab>
			<b:tab title="CSS">
				<b:well>
				   <p>AngularFaces and AngularJS add a CSS class to an erroneous input field and its label and error message. For maximum flexibility, that's three different classes. It's up to you to decide whether you want to
				      highlight a violated validation constraint in the label, the field, the error message or a combination of them. The example below colors everything red - not exactly decent, but making it almost impossible to ignore a mistake:</p>
				<script type="syntaxhighlighter" class="brush: css; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
<style>
  .ng-invalid {                    /* ng-invalid is added to an offending input field. */ 
    border-color: #c33;
    border-width: 1px;
  }
  .ui-state-error { color:#d33;}   /* ui-state-error is added to labels of erroneous input fields. */
  .pui-message    { color:#d33; }  /* The puimessage tag displays an error message (similar to <h:message />). */
  .pui-label      { width:100%;}   /* af-label is the CSS class added to an automatically generated label.
                                      Add width:100% to allow for right hand side alignment. */
</style>
]]>
</script>
				
				</b:well>
			</b:tab>
		</b:tabView>
	</h:body>
</ui:fragment>