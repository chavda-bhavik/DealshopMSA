<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:b="http://bootsfaces.net/ui"
      xmlns:ui="http://java.sun.com/jsf/facelets">

            <ui:define name="content">
                <h1>Panels</h1>
                <p>While not always necessary, sometimes you need to put your DOM in a box. For those situations, the panel component comes in handy.</p>

                <h3>Basic example</h3>
                <p>By default, all the <code>&lt;b:panel&gt;</code> does is apply some basic border and padding to contain some content.</p>

                <b:panel>
                    <h:outputText value="Basic panel example "/>
                </b:panel>

                <h3 id="panels-heading">Panel with heading</h3>
                <p>Easily add a heading container to your panel specifying the <code>heading</code> facet. You may also include any <code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code> to add a pre-styled heading.</p>
                <p>As an alternative, you can specify a Title with the <code>title</code> attribute; since this is  meant as an option, the heading facet will not be rendered and the panel will render with a heading having the attribute's value as Title.</p>

                <b:panel>
                    <f:facet name="heading">
                        <h:outputText value="Panel heading without title"/>
                    </f:facet>
                    <h:outputText value="Panel Content"/>
                </b:panel>
                <br/>
                
                <b:panel title="Panel title" collapsible="false">
                    <f:facet name="heading">
                        <h:outputText value="Panel heading without title"/>
                    </f:facet>
                    <h:outputText value="Panel Content"/>
                </b:panel>
                <h3>Collapsible panels</h3>
                <p>By default, panels can be collapse by clicking the title bar or the chevron at the right hand side of the title bar. If you
                don't need this feature, you can switch it off by adding the attribute <code>collapsible="false"</code>:</p>
                
                <b:panel title="Try to fold me away!" collapsible="false">
                   I bet you can't...
                </b:panel>
                
                <h3>Persistent collapse/expand state</h3>
                <p>By default, panels are not collapsed when the page is rendered. If they're outside a form, 
                they are also expanded after a post request (i.e. after clicking a button) - even if the user had collapsed the panel before clicking the button.
                To preserve the expansion state on postbacks, make sure to put the panel into the same form as the command button. The panel below
                is the only panel on this page which restores its state after clicking the button:</p>
                
                <b:panelGrid colSpans="6,6" id="stateGridId">
	                <h:form>
		                <b:panel title="Within form - collapse state is restored" look="primary" >
		                    <h:outputText value="Panel Content"/>
		                    <b:messages />
		                </b:panel>
		                <b:commandButton value="Redraw this page" update="stateGridId" ajax="true" actionListener="#{messagesBean.info}"/>
	           	    </h:form>
	                <b:panel title="outside the form - open after each postback" look="danger" >
	                    <h:outputText value="Panel Content"/>
	                    <b:messages />
	                </b:panel>
	            </b:panelGrid>
	            
				<h3>Programmable collapse/expand state</h3>
	            <p>The collapse state can also be controlled by an attribute of a managed bean:</p>
	            <h:form>
	            <b:panelGrid colSpans="6,6">
	                <b:panel title="I'm #{panelBean.firstText} because of a bean attribute." look="danger" collapsed="#{panelBean.firstPanelCollapsed}">
	                    <h:outputText value="Panel Content"/>
	                    <b:messages />
	                </b:panel>
	                <b:panel title="I'm #{panelBean.secondText} because of a bean attribute." look="danger" collapsed="#{panelBean.secondPanelCollapsed}">
	                    <h:outputText value="Panel Content"/>
	                    <b:messages />
	                </b:panel>
	                </b:panelGrid>
	                <b:commandButton ajax="true" update="@form" actionListener="#{panelBean.toggle}" value="toggle" />
                </h:form>
                <p>However, if the user opens or closes a panel, their choice overrides the values taken from the bean.</p>                
                
                <br/>
                <h3 id="panels-alternatives">Contextual alternatives</h3>
                <p>Like other components, easily make a panel more meaningful to a particular context by adding a <code>look</code> attribute with values primary, success, info, warning or danger.</p>
                <b:panel title="Panel Title - Primary" look="primary" >
                    <h:outputText value="Panel Content"/>
                </b:panel>
                <b:panel title="Panel Title - Success" look="success">
                    <h:outputText value="Panel Content"/>
                </b:panel>
                <b:panel title="Panel Title - Info" look="info">
                    <h:outputText value="Panel Content"/>
                </b:panel>
                <b:panel title="Panel Title - Warning" look="warning">
                    <h:outputText value="Panel Content"/>
                </b:panel>
                <b:panel title="Panel Title - Danger" look="danger">
                    <h:outputText value="Panel Content"/>
                </b:panel>
                <h3 id="panels-footer">Panel with footer</h3>
                <p>Wrap buttons or secondary text in a <code>footer</code> facet. Note that panel footers <strong>do not</strong> inherit colors and borders when using contextual variations as they are not meant to be in the foreground.</p>
                <b:panel title="Panel with Footer" look="info">
                    <h:outputText value="Panel Content"/>
                    <f:facet name="footer">
                        <h:outputText value="Panel Footer"/>
                    </f:facet>
                </b:panel>
                
                <br/>
                <h2>Reference section</h2>
                <ui:include src="PanelAttributes.xhtml" />
                <b:panel look="info">
				<f:facet name="heading">
					<b>Facets of &lt;b:panel &gt;</b>
				</f:facet>
					<table class="table table-striped table-hover"
						style="background-color: #fff">
						<thead>
							<tr>
								<th>Name of the facet</th>
								<th>Description</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>heading</td>
								<td>This optional facet can be used to render complex titles.</td>
							</tr>
							<tr>
								<td>footer</td>
								<td>This optional facet can be used to render complex footers.</td>
							</tr>
						</tbody>
               		</table>
    			</b:panel>

                <b:panel look="info">
    				<f:facet name="heading">
    					<b>Skinning</b>
    				</f:facet>
    				   <table class="table table-striped table-hover"
						style="background-color: #fff">
    				   <tr><td>panel</td><td>This CSS class applies to the entire panel.</td></tr>
    				   <tr><td>panel-title</td><td>This CSS class applies to the title area of the panel.</td></tr>
    				   <tr><td>panel-footer</td><td>This CSS class applies to the footer area of the panel.</td></tr>
    				   </table>
    			</b:panel>
                    
                <br/><br/><br/>
            </ui:define>
        </ui:composition>
