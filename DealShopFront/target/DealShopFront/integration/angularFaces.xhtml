<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:b="http://bootsfaces.net/ui"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:ac="http://beyondjava.net/angularFacesCore">
<h:head>
	<title>BootsFaces: next-gen JSF Framework</title>
	<meta name="author" content="Riccardo Massera, Stephan Rauh et al."></meta>
</h:head>
<body style="padding-top: 60px">
	<ui:composition template="/applayout/angularFacesPageTemplate.xhtml">
		<ui:define name="content">
			<style>
td {
	padding: 8px;
}
.ng-invalid {
  border-bottom-color: #c33;
  border-bottom-width: 1px dotted;
}
.ui-state-error { color:#d33;background-color:inherit;border:none;}
.pui-message { color:#d33; padding-top:7px }
.pui-label { width:100%;}
</style>

			<h:outputScript library="integration" name="sample1.js" />


			<h1>Integration with AngularFaces</h1>
			<p>Starting with AngularFaces 2.1 and BootsFaces 0.6.0, both
				frameworks are aligned to each other. AngularFaces offers special
				support for BootsFaces, and BootsFaces is tested to work with
				AngularFaces.</p>
			<h2>Teaser</h2>
			<p>Consider the form below and the corresponding XHTML source code. As you can see, this is a pretty relaxed, almost HTML-like style of writing a JSF view:
			</p>
			<ui:include src="af-sample1.xhtml" />
			
			<h3>Why is AngularFaces interesting?</h3>
			<p>We can mention only a few advantages of AngularFaces here:</p>
			<ul>
				<li>It opens the world of AngularJS programming to JSF programmers. Notice the mustaches in the JSF source code. They refer both to the AngularJS model and the JSF bean. AngularFaces synchronizes both models for you.</li>
				<li>You can use (and write) widgets that are rendered on the client side. For instance, ng-table is a great replacement for JSF datatables.</li>
				<li>Labels and error messages are optionally generated automatically.</li>
				<li>Labels and messages are translated to foreign languages automatically.</li>
				<li>Most JSR303 bean validations are evaluated on the client.</li>
				<li>Optionally you can adopt an HTML-like style. For instance, you can omit the <code>b:</code> prefixes. For instance, <code>b:row</code> simply becomes <code>row</code>. Note
				    the <code>&lt;b:selectOneMenu /&gt;</code> in the example above. It almost passes for a native HTML <code>&lt;select&gt;</code> widget.</li>
			</ul>
			<p>Read the full story on the <a target="#" href="http://www.angularfaces.com">AngularFaces manual page.</a></p>
			
			
			 
			<h2>Getting started</h2>
			<p>You have to add both the BootsFaces and the AngularFaces jar
				files. AngularFaces also requires a Json serializer - currently
				either Gson or Jackson:</p>
			<b:tabView contentStyle="height:480px">
				<b:tab title="Maven">
					<p>Add these lines to your Maven pom.xml file:</p>
					<b:well>
						<ui:include src="af-sample2.xhtml" />
					</b:well>
				</b:tab>
				<b:tab title="Gradle">
					<b:well>
<script type="syntaxhighlighter" class="brush: groovy; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
	compile 'de.beyondjava:angularFaces-core:2.1.+'
    compile 'net.bootsfaces:bootsfaces:0.6.6'
    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.5.0'
]]>
</script>
<p>AngularFaces also needs a Json serializer. As of AngularFaces 2.1, Jackson and Gson are supported. Activate one of the following dependencies:</p>
<script type="syntaxhighlighter" class="brush: groovy; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
	compile 'com.google.code.gson:gson:2.2.4'

    compile 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.5.0'
]]>
</script>
					</b:well>
				</b:tab>
				<b:tab title="Others">
					<p>AngularFaces is available at <a target="#" href="">Maven Central.</a> You also need a Json serializer. As of AngularFaces 2.1, Jackson and Gson are supported.</p>
				</b:tab>
			</b:tabView>
			<h3>Configuration</h3>
			<p>
				You have to add a few lines to the web.xml. For the sake of
				convenience, we show both the entire minimal
				<code>web.xml</code>
				and the complete minimal
				<code>faces-config.xml</code>
				files:
			</p>

			<b:tabView contentStyle="height:580px">
				<b:tab title="web.xml">
					<b:well>
						<ui:include src="af-sample3.xhtml" />
					</b:well>
				</b:tab>
				<b:tab title="faces-config.xml">
					<b:well>
						<ui:include src="af-sample4.xhtml" />
					</b:well>
				</b:tab>
			</b:tabView>
			
			<h3>Pitfalls</h3>
			<h4>form and ng-controller</h4>
			<p>It's important to put the form inside the div containing the ng-controller. Otherwise, everything works fine - but you never see the validation error messages.</p>
			<h4>Multiple forms</h4>
			<p>AngularFaces supports only one controller per JSF view and one form per controller. Don't put more than one form in a controller.</p>
			<h4>separatorchar and prependId</h4>
			<p>AngularJS doesn't cope with Java's default separator char which is used internally in ids. The best solution is to clear the form attribute <code>prependId=false</code>.
			Alternatively, you can set the separator charactor to "%" in the <code>web.xml.</code> However, the latter solution is not officially supported by the JSF specification, so we don't recommend it.</p>
			<h4>Tag decorators</h4>
			<p>By default, AngularFaces converts HTML tags to JSF or even BootsFaces tags very eagerly. Sometimes this stands in your way. If so, you can use the <code>ConservativeAngularTagDecorator</code>
			instead of the <code>AngularTagDecorator</code> in the <code>faces-config.xml</code>. The conservative implementation only translates <code>div</code>, <code>span</code>, <code>messages</code>
			and <code>translate</code> to AngularFaces tags.</p>
			

			<h3>Relaxed HTML-like style of writing</h3>
			<p>Once you've activated AngularFaces, you can write most BootsFaces tags without the preceding <code>b:</code>. These tags can be written in the relaxed fashion:</p>
			<ul>
				<li>alert</li>
				<li>badge</li>
				<li>modal</li>
				<li>commandButton</li>
				<li>buttonGroup</li>
				<li>buttonToolbar</li>
				<li>navBar</li>
				<li>navbarLinks</li>
				<li>listLinks</li>
				<li>navLink</li>
				<li>dropButton</li>
				<li>dropMenu</li>
				<li>thumbnail</li>
				<li>container</li>
				<li>row</li>
				<li>column</li>
				<li>panel</li>
				<li>jumbotron</li>
				<li>well</li>
				<li>datepicker</li>
				<li>slider</li>
				<li>inputSecret</li>
				<li>inputText</li>
				<li>selectBooleanCheckbox</li>
				<li>selectOneMenu</li>
				<li>tabView</li>
				<li>tab</li>
			</ul>





			<script type="text/javascript">
                    SyntaxHighlighter.all();
                </script>
			<br />
			<br />
			<br />
			<br />
		</ui:define>
	</ui:composition>
</body>
</html>
