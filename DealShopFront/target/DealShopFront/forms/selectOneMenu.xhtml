<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:b="http://bootsfaces.net/ui"
      xmlns:ui="http://java.sun.com/jsf/facelets">

            <ui:define name="content">
                <style>td {padding: 8px;}</style>
                <h1>Combobox (&lt;b:selectOneMenu&gt;)</h1>
                
                <p>Comboboxes give you a list of items to select from. As of Bootsfaces 0.6, comboboxes are not editable - they are pure drop-down menus.</p>
                <p>&lt;b:selectOneMenu&gt; makes the Bootstrap style of displaying comboboxes available to JSF programmers.</p>
                <h1>Basic usage</h1>
        <h:form>
            <b:tabView activeIndex="1">
                <b:tab title="JSF markup">
                    <b:well>
                        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
        <h:form>
	        <b:panelGrid colSpans="2,2,2,2,4">
	        	<h:outputLabel value="Select your car's brand:" for="brandID" />
			    <b:selectOneMenu value="&num;{carBean.brand}" id="brandID" >
				    <f:selectItem itemLabel="Fiat" itemValue="1"/>
				    <f:selectItem itemLabel="Honda" itemValue="2"/>
				    <f:selectItem itemLabel="Opel" itemValue="3"/>
			    </b:selectOneMenu>
			    <h:message for="brandID"/>
			    <h:outputLabel value="last submitted value:" for="brandOutputID"/>
			    <b:inputText value="&num;{carBean.brand}" disabled="true" id="brandOutputID"/>
	        	<h:outputLabel value="Select your car's type:" for="typeID" />
			    <b:selectOneMenu value="&num;{carBean.type}" id="typeID" required="true">
			    		<f:selectItem itemLabel="(Please select)" itemValue=""/>
			    		<f:selectItem itemLabel="Cinquecento" itemValue="1"/>
					    <f:selectItem itemLabel="Civic" itemValue="2"/>
					    <f:selectItem itemLabel="Astra" itemValue="3"/>
			    </b:selectOneMenu>
			    <h:message for="typeID"/>
			    <h:outputLabel value="last submitted value:" for="typeOutputID" />
			    <b:inputText value="&num;{carBean.type}" disabled="true" id="typeOutputID"/>
		    </b:panelGrid>
        </h:form>
]]>
       </script>
                    </b:well>
                </b:tab>
                <b:tab title="displayed as">
                    <b:well>
                        <b:panelGrid colSpans="2,2,2,2,4">
                            <h:outputLabel value="Select your car's brand:" for="brandID" id="l1" />
                            <b:selectOneMenu value="#{carBean.brand}" id="brandID">
                                <f:selectItem itemLabel="(Please select)" itemValue="" />
                                <f:selectItem itemLabel="Fiat" itemValue="1" />
                                <f:selectItem itemLabel="Honda" itemValue="2" />
                                <f:selectItem itemLabel="Opel" itemValue="3" />
                            </b:selectOneMenu>
                            <h:message for="brandID" />
                            <h:outputLabel value="last submitted value:" for="brandOutputID" />
                            <b:inputText value="#{carBean.brand}" disabled="true" id="brandOutputID" />
                            <h:outputLabel value="Select your car's type:" for="typeID" />
                            <b:selectOneMenu value="#{carBean.type}" id="typeID" required="true">
                                <f:selectItem itemLabel="(Please select)" itemValue="" />
                                <f:selectItem itemLabel="Cinquecento" itemValue="1" />
                                <f:selectItem itemLabel="Civic" itemValue="2" />
                                <f:selectItem itemLabel="Astra" itemValue="3" />
                                <f:selectItem itemLabel="Megane" itemValue="4" />
                            </b:selectOneMenu>
                            <h:message for="typeID" />
                            <h:outputLabel value="last submitted value:" for="typeOutputID" />
                            <b:inputText value="#{carBean.type}" disabled="true" id="typeOutputID" />
                        </b:panelGrid>
                        <b:commandButton value="Submit">
                            <f:ajax execute="@form" rendered="@form" />
                        </b:commandButton>
                    </b:well>
                </b:tab>
            </b:tabView>
        </h:form>
        
        <h1>Objects and converters</h1>
        <p>In most cases you don't need a converter to use an arbitrary object as bean attribute. It suffices to use the attributes <code>var</code>, <code>itemValue</code> and <code>itemLabel</code> of <code>&lt;f:selectItem /&gt;</code> and <code>&lt;f:selectItems /&gt;</code>.</p>
        <b:alert severity="warning" title="As of BootsFaces 0.7.0, converters aren't used correctly when rendering." />  
        
        <h:form>
            <b:tabView activeIndex="3">
                <b:tab title="JSF markup">
                <b:well>
                    <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
                    <b:panelGrid colSpans="3,3,6">
                         <f:event listener="&num;{soccerTeamBean.init}" type="preRenderView" />
                        <h:outputLabel value="Select your team's goalkeeper:" for="keeperID" />
                        <b:selectOneMenu value="&num;{soccerTeamBean.goalkeeper}" id="keeperID">
                            <f:selectItems value="&num;{soccerTeamBean.team}" var="playerVar" itemValue="&num;{playerVar}"
                                itemLabel="&num;{playerVar.name}" />
                        </b:selectOneMenu>
                        Current keeper: &num;{soccerTeamBean.goalkeeper.name}
                    </b:panelGrid>
                    <b:commandButton value="Submit">
                        <f:ajax execute="@form" rendered="@form" />
                    </b:commandButton>
]]>
                   </script>
                </b:well>
                </b:tab>
                                <b:tab title="Team bean">
                <b:well>
                    <script type="syntaxhighlighter" class="brush: java; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
@ManagedBean
@ViewScoped
public class SoccerTeamBean implements Serializable {
    private static final long serialVersionUID = 1L;

    private List<Player> team;
    private Player goalkeeper;

    public void init(ComponentSystemEvent e) {
        this.team = new ArrayList<>();
        this.team.add(new Player("Marc-Andr√© ter Stegen"));
        this.team.add(new Player("Jordi Masip"));
        this.team.add(new Player("Jordi Alba"));
        this.team.add(new Player("Marc Batra"));
    }

    public List<Player> getTeam() {
        return team;
    }

    public void setTeam(List<Player> team) {
        this.team = team;
    }

    public Player getGoalkeeper() {
        return goalkeeper;
    }

    public void setGoalkeeper(Player goalkeeper) {
        this.goalkeeper = goalkeeper;
    }
}
]]>
                   </script>
                   </b:well>
                </b:tab>
                                <b:tab title="Player class">
                                                <b:well>
                                
                    <script type="syntaxhighlighter" class="brush: java; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
public class Player {

    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Player(String name) {
        this.name = name;
    }
}
]]>
                   </script>
                   </b:well>
                </b:tab>
                
                <b:tab title="displayed as">
                <b:well>
                    <b:panelGrid colSpans="3,3,6">
                        <f:event listener="#{soccerTeamBean.init}" type="preRenderView" />
                        <h:outputLabel value="Select your team's goalkeeper:" for="keeperID" />
                        <b:selectOneMenu value="#{soccerTeamBean.goalkeeper}" id="keeperID">
                            <f:selectItems value="#{soccerTeamBean.team}" var="playerVar" itemValue="#{playerVar}"
                                itemLabel="#{playerVar.name}" />
                        </b:selectOneMenu>
                        Current keeper: #{soccerTeamBean.goalkeeper.name}
                    </b:panelGrid>
                    <b:commandButton value="Submit">
                        <f:ajax execute="@form" rendered="@form" />
                    </b:commandButton>
                    </b:well>
                </b:tab>
            </b:tabView>
        </h:form>
        
        
        <h1>Arrays and HashMaps</h1>
        <p>The list of items can be defined as an <code>&lt;f:selectItems /&gt;</code> tag. BootsFaces uses a modified version of the 
        algorithm PrimeFaces 5.1 uses to implement <code>&lt;f:selectItems /&gt;</code>. As a result, you can use <code>&lt;b:selectOneMenu&gt;</code>
        almost the same way as <code>&lt;b:selectOneMenu&gt;</code>. </p>
        <h:form>
<b:tabView activeIndex="0">
    <b:tab title="JSF markup">
                    <b:well>
    
       <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
	        <b:panelGrid colSpans="2,2,8">
	        	<h:outputLabel value="Traffic light color" />
			    <b:selectOneMenu value="&num;{semaphoreBean.color}"  >
		    		<f:selectItems value="&num;{semaphoreBean.colors}" var="c" itemValue="&num;{c}" itemLabel="&num;{c}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
			    <h:outputLabel value="Traffic light meaning" />
			    <b:selectOneMenu value="&num;{semaphoreBean.meaning}"  >
		    		<f:selectItems value="&num;{semaphoreBean.meanings}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
		    </b:panelGrid>
]]>
       </script>
       </b:well>
    </b:tab>
    <b:tab title="Java bean">
                <b:well>
       <script type="syntaxhighlighter" class="brush: java; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
@javax.faces.bean.RequestScoped
@ManagedBean
public class SemaphoreBean {
	@NotNull
	private String color = null;

	@NotNull
	private String meaning = null;

	private List<String> colors;

	private Map<String, String> meanings;

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public String getMeaning() {
		return meaning;
	}

	public void setMeaning(String meaning) {
		this.meaning = meaning;
	}

	public List<String> getColors() {
		return colors;
	}

	public void setColors(List<String> colors) {
		this.colors = colors;
	}

	public Map<String, String> getMeanings() {
		return meanings;
	}

	public void setMeanings(Map<String, String> meanings) {
		this.meanings = meanings;
	}

	{
		colors = Arrays.asList("green", "yellow", "red");
		meanings = new HashMap<String, String>();
		meanings.put("go", "green");
		meanings.put("be alert", "yellow");
		meanings.put("stop", "red");
	}
}
]]>
       </script>
       </b:well>)
    </b:tab>
    
    
    <b:tab title="displayed as">
                <b:well>
	        <b:panelGrid colSpans="2,2,8">
	        	<h:outputLabel value="Traffic light color" />
			    <b:selectOneMenu value="#{semaphoreBean.color}"  >
		    		<f:selectItems value="#{semaphoreBean.colors}" var="c" itemValue="#{c}" itemLabel="#{c}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
			    <h:outputLabel value="Traffic light meaning" />
			    <b:selectOneMenu value="#{semaphoreBean.meaning}"  >
		    		<f:selectItems value="#{semaphoreBean.meanings}"/>
			    </b:selectOneMenu>
			    <h:outputLabel value="" />
		    </b:panelGrid>
            </b:well>
    </b:tab>
</b:tabView>
        </h:form>
        
        
        
                <h1>Labels as captions above the combobox</h1>
<b:tabView>
  <b:tab title="JSF markup">
                  <b:well>
  
    <script type="syntaxhighlighter" class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
    <h:form>
    	<h:panelGrid columns="4" cellpadding="5">
		    <b:selectOneMenu value="&num;{carBean.brand}" label="Select your car's brand:">
				    <f:selectItem itemLabel="Fiat" itemValue="1"/>
				    <f:selectItem itemLabel="Honda" itemValue="2"/>
				    <f:selectItem itemLabel="Opel" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message for="brandID"/>
		    <b:inputText value="&num;{carBean.brand}" disabled="true" label="last submitted value:"/>
		    <b:selectOneMenu value="&num; {carBean.type}" label="Select your car's type:" id="typeID">
		    		<f:selectItem itemLabel="Cinquecento" itemValue="1"/>
				    <f:selectItem itemLabel="Civic" itemValue="2"/>
				    <f:selectItem itemLabel="Astra" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message  for="typeID" />
		    <b:inputText value="&num;{carBean.type}" disabled="true" label="last submitted value:"/>
        </h:panelGrid>
    </h:form>
]]>
    </script>
    </b:well>
  </b:tab>
  <b:tab title="displayed as">
                  <b:well>
  
    <h:form>
    	<h:panelGrid columns="3"  cellpadding="5">
		    <b:selectOneMenu value="# {carBean.brand}" label="Select your car's brand:" id="brandID2">
				    <f:selectItem itemLabel="Fiat" itemValue="1"/>
				    <f:selectItem itemLabel="Honda" itemValue="2"/>
				    <f:selectItem itemLabel="Opel" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message showSummary="false"  for="brandID2"/>
		    <b:inputText value="#{carBean.brand}" disabled="true" label="a last submitted value:"/>
		    <b:selectOneMenu value="#{carBean.type}" label="Select your car's type:" id="typeID2">
		    		<f:selectItem itemLabel="Cinquecento" itemValue="1"/>
				    <f:selectItem itemLabel="Civic" itemValue="2"/>
				    <f:selectItem itemLabel="Astra" itemValue="3"/>
		    </b:selectOneMenu>
		    <h:message for="typeID2"/>
		    <b:inputText value="#{carBean.type}" disabled="true" label="b last submitted value:"/>
        </h:panelGrid>
    </h:form>
  </b:well>
  </b:tab>
</b:tabView>
              
                <p>The label is displayed above the combobox</p>
				<br />
				<br />
                			<b:panel look="info">
				<f:facet name="heading">
					<b>Attributes of &lt;b:selectOneMenu &gt;</b>
				</f:facet>
					<table class="table table-striped table-hover"
						style="background-color: #fff">
						<thead>
							<tr>
								<th>Attribute</th>
								<th>Default value</th>
								<th>Description</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>label</td>
								<td>(none)</td>
								<td>This attribute is optional. If you provide it, the combobox is preceded by a <a target="#" href="http://getbootstrap.com/components/#labels">Bootstrap label</a>.</td>
							</tr>
							<tr>
								<td>value</td>
								<td>(none)</td>
								<td>The EL expression connecting the combobox to a JSF bean.</td>
							</tr>
							<tr>
								<td>id</td>
								<td>(none)</td>
								<td>Unique identifier of the component.</td>
							</tr>
							<tr>
								<td>styleClass</td>
								<td>(none)</td>
								<td>CSS class</td>
							</tr>
							<tr>
								<td>span</td>
								<td>(none)</td>
								<td>Influences the width of the combobox, measured by Bootstrap cells. Legal values are 1-12. As of BootsFaces 0.6, the generated CSS class is always medium size (<code>col-md-1</code> - <code>col-md-12</code>).</td>
							</tr>
							<tr>
								<td>fieldSize</td>
								<td>(none)</td>
								<td>Influences the height of the combobox. If fieldSize is set, the attribute <code>input-{{fieldSize}}</code> is added to the CSS classes. Legal values are <code>sm</code> and <code>lg</code>.</td>
							</tr>
							<tr>
								<td>renderLabel</td>
								<td>true</td>
								<td>By default, BootsFaces generates a label if the label attribute is set. However, AngularFaces generates labels, too, so you have to decide
								whether you which label you need (if you use both frameworks). renderLabel="false" is automatically set by AngularFaces if it generates
								labels automatically.</td>
							</tr>
							
							<tr>
								<td>readonly</td>
								<td>(none)</td>
								<td>Takes a boolean value. For the difference between readonly and disabled see <a target="#" href="http://www.w3.org/TR/html4/interact/forms.html#h-17.12">the definition by w3c.org</a>.</td>
							</tr>
							<tr>
								<td>disabled</td>
								<td>(none)</td>
								<td>Takes a boolean value. For the difference between readonly and disabled see <a target="#" href="http://www.w3.org/TR/html4/interact/forms.html#h-17.12">the definition by w3c.org</a>.</td>
							</tr>
							<tr>
								<td>accesskey</td>
								<td>(none)</td>
								<td>Standard HTML attribute</td>
							</tr>
							<tr>
								<td>title</td>
								<td>(none)</td>
								<td>Standard HTML attribute</td>
							</tr>
							<tr>
								<td>alt</td>
								<td>(none)</td>
								<td>Standard HTML attribute</td>
							</tr>
							<tr>
								<td>lang</td>
								<td>(none)</td>
								<td>Standard HTML attribute</td>
							</tr>
							<tr>
								<td>tabindex</td>
								<td>(none)</td>
								<td>Determines in which order element get the focus when activated via the TAB or Shift+TAB key.</td>
							</tr>
							<tr>
								<td>title</td>
								<td>(none)</td>
								<td></td>
							</tr>
							<tr>
								<td>style</td>
								<td>(none)</td>
								<td>CSS style.</td>
							</tr>
							<tr>
								<td>onclick</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
							<tr>
								<td>ondblclick</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
							<tr>
								<td>onblur</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
							<tr>
								<td>onmousedown</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
							<tr>
								<td>onmousemove</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
							<tr>
								<td>onmouseout</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
							<tr>
								<td>onmouseover</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
							<tr>
								<td>onmouseup</td>
								<td>(none)</td>
								<td>Javascript event handler.</td>
							</tr>
						</tbody>
					</table>
			</b:panel>
            <b:panel look="info">
				<f:facet name="heading">
					<b>Skinning</b>
				</f:facet>
				<ul>
					<li>
				   		The combobox is a <code>select</code> tag bearing the CSS-class <code>form-control</code>.
				   </li>
				   <li>
				   		If the attribute <code>required</code> is true, the pseudo CSS class <code>bf-required</code> is added. Thus you can define your custom style for required fields.
				   </li>
				  </ul> 
			</b:panel>
                
                <script type="text/javascript">
                    SyntaxHighlighter.all();
                </script>
                <br/><br/><br/><br/>
            </ui:define>
</ui:composition>
